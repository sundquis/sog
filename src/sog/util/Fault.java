/**
 * Copyright (C) 2021, 2023
 * *** *** *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 * *** *** * 
 * Sundquist
 */
package sog.util;


import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;
import java.util.stream.Collectors;

import sog.core.App;
import sog.core.Assert;
import sog.core.Strings;
import sog.core.Test;

/**
 * For delivery of error messages.
 * 
 * Faults are associated with a source object. The default, when no source is given, is to identify
 * the fault with a global application object. Clients can register to listen for global
 * application faults, or for faults associated with a particular source.
 * 
 * The Fault instance encapsulates diagnostic information about the defect as a list of String
 * detail messages, and also holds a String encoding of the stack trace where the Fault was generated. 
 * The implementation of Printable presents the diagnostic information.
 */
@Test.Subject( "test." )
public class Fault implements Printable {
	
	
	/*
	 * The key is the associated source object, or APP if none was given. The value is
	 * the associated set of fault-consumers (listeners) that have registered to be notified
	 * for faults generated by the source.
	 */
	private static final Map<Object, Set<Consumer<Fault>>> SOURCE_TO_LISTENERS = new HashMap<>();

	/**
	 * Register the given listener to receive notification of faults associated with the given source.
	 * 
	 * @param listener
	 */
	@Test.Decl( "Throws AssertionError for null source" )
	@Test.Decl( "Throws AssertionError for null listener" )
	@Test.Decl( "Subsequent faults for given source are deleivered to listener" )
	@Test.Decl( "Subsequent faults for other sources are ignored" )
	public static void addListener( Object source, Consumer<Fault> listener ) {
		Assert.nonNull( source );
		Assert.nonNull( listener );
		
		Set<Consumer<Fault>> listenerSet = Fault.SOURCE_TO_LISTENERS.get( source );
		if ( listenerSet == null ) {
			listenerSet = new HashSet<Consumer<Fault>>();
			Fault.SOURCE_TO_LISTENERS.put( source, listenerSet );
		}
		listenerSet.add( listener );
	}
	
	/**
	 * Unsubscribe the given listener waiting on faults associated with the given source.
	 * 
	 * @param listener
	 */
	@Test.Decl( "Throws AssertionError for null source" )
	@Test.Decl( "Throws AssertionError for null listener" )
	@Test.Decl( "Subsequent faults for given source are not deleivered to listener" )
	public static void removeListener( Object source, Consumer<Fault> listener ) {
		Assert.nonNull( source );
		Assert.nonNull( listener );
		
		Set<Consumer<Fault>> listenerSet = Fault.SOURCE_TO_LISTENERS.get( source );
		if ( listenerSet != null ) {
			listenerSet.remove( listener );
		}
	}


	
	
	/* The object associated with the source of the Fault. Listeners for this object will be notified. */
	private final Object source;
	
	/* Description of the nature of the defect. */
	private final String description;
	
	/* Optional list of detail messages. */
	private final List<String> details;
	
	/* String encoding of the stack trace from the point where the Fault was generated. */
	private final List<String> faultLocation;
	
	/**
	 * Construct a {@code Fault} representing an application defect associated with the given source object.
	 * 
	 * The required non-empty description explains the nature of the fault. The optional
	 * detail objects provide additional context.
	 * 
	 * @param source
	 * @param description
	 * @param details
	 */
	@Test.Decl( "Throws AssertionError for null source" )
	@Test.Decl( "Throws AssertionError for enpty description" )
	public Fault( Object source, String description, Object ... details ) {
		this.source = Assert.nonNull( source );
		this.description = Assert.nonEmpty( description );
		this.details = Arrays.stream( details ).map( Strings::toString )
			.collect( Collectors.toCollection( ArrayList<String>::new ) );
		this.faultLocation = App.get().getLocationMatching( "^sog.*|^test.*" ).collect( Collectors.toList() );
	}

	
	/**
	 * Broadcasts a {@code Fault} to all registered listeners.
	 * 
	 * Similar to throwing an exception but "gentler". Useful in compilation-style
	 * processes where it's useful to gather as much feedback as possible.
	 */
	@Test.Decl( "Fault is delivered to each registered listener" )
	@Test.Decl( "Listeners registered for other sources are ignored" )
	public void toss() {
		Set<Consumer<Fault>> listeners = Fault.SOURCE_TO_LISTENERS.get( this.source );
		if ( listeners != null ) {
			listeners.forEach( this::deliver );
		}
	}

	/**
	 * Notify the indicated listener.
	 * 
	 * @param listener
	 */
	@Test.Decl( "Throws AssertionError for null listener" )
	@Test.Decl( "Fault is delivered to given listener" )
	@Test.Decl( "All other listeners are ignored" )
	public void deliver( Consumer<Fault> listener ) {
		Assert.nonNull( listener ).accept( this );
	}
	

	/**
	 * Add an additional detail to this {@code Fault}.
	 * Mutator pattern allows chaining.
	 * 
	 * @param detail
	 * @return
	 */
	@Test.Decl( "Throws AssertionError for null detail" )
	@Test.Decl( "Detail converted using Strings.toString()" )
	@Test.Decl( "Detail is appended to previous details" )
	@Test.Decl( "Return is this Fault instance" )
	public Fault addDetail( Object detail ) {
		this.details.add( Strings.toString( Assert.nonNull( detail ) ) );
		return this;
	}
	
	
	/**
	 * Description of the fault
	 */
	@Override
	@Test.Decl( "Returns non-empty description" )
	public String toString() {
		return "Fault(" + this.description + ")";
	}
	

	/**
	 * Write a "pretty-print" representation on the given writer
	 * 
	 * @see sog.util.Printable#print(sog.util.IndentWriter)
	 */
	@Override
	@Test.Decl( "Throws AssertionError for null writer" )
	@Test.Decl( "Description printed" )
	@Test.Decl( "Source is printed" )
	@Test.Decl( "Fault location printed" )
	@Test.Decl( "All details printed" )
	public void print( IndentWriter out ) {
		Assert.nonNull( out );
		
		out.println( this.toString() );
		out.increaseIndent();
		
		out.println( "SOURCE: " + Strings.toString( this.source ) );

		out.println( "LOCATION:" );
		out.increaseIndent();
		this.faultLocation.forEach( out::println );
		out.decreaseIndent();

		out.println( "DETAILS:" );
		out.increaseIndent();
		this.details.forEach( out::println );
		out.decreaseIndent();

		out.decreaseIndent();
		out.println();
	}

	
}
